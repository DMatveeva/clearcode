7. 
7.1. "Приведите пять примеров правильного именования булевых переменных в вашем коде в формате "было - стало"."
sorted -> isSorted
bankrupted -> isBancrupted
seen -> isMessageSeen
egoist -> isEgoist
check_first -> is_first_hash_fun_zero // Проверка позиции, выдаваемой 1й хэш функцией в фильтре Блума.

7.2. "Найдите несколько подходящих случаев, когда в вашем коде можно использовать типичные имена булевых переменных."
finished -> done
isError -> error

7.3. "Проверьте, правильно ли вы даёте имена индексам циклов. Попробуйте найти случай, когда вместо i j k нагляднее использовать более выразительное имя."
Нашла цикл, где идет итерация по списку объектов Person, где имя счетчика х. Далее вложенный цикл по списку тестов, имя счетчика i. Циклы довольно длинные, со множеством условий, счетчики используются часто и смысл их теряется. Наверное лучше было бы назвать personCount и testCount.

7.4.  "Попробуйте найти в своих решениях два-три случая, когда можно использовать пары имён - антонимы."
В связном списке используем head и tail для обозначения головы и хвоста.
В моей дипломной работе использовались понятия altruist, egoist.


7.5. "Всем ли временным переменным в вашем коде присвоены выразительные имена? Найдите несколько случаев, когда временные переменные надо переименовать, и поищите, возможно, от некоторых временных переменных вам получится вообще полностью избавиться."
Разбираю код, который использовался в моей дипломной работе. Нашла класс, который писался коллегой, думаю что хорошо иллюстрирует, что имя переменной должно соответствовать области видимости. Есть класс ParticipantInfo, он нередко используется. У него есть поля c названиями a, e, g. Мне пришлось найти и прочитать документацию к проекту, чтобы вспомнить, что они определяют, насколько участник соответственно альтруист, эгоист, или действует в интересах своей группы. Думаю, логичнее было бы назвать их altruismСoefficient, egoismСoefficient, groupСoefficient.
Также, нашла например длинный цикл с несколькими вложенными циклами, где вначале определяется переменная типа ParticipantInfo с названием pi. Лучше было ее назвать participantInfo, а то к концу цикла уже сложно вспомнить о чем она, и к тому же слишком напоминает pi из математики.
Обнаружила, что у класса Person из этого же проекта есть поле id, которое в принципе не нужно, т.к. нигде в проекте не работаем с конкретными объектами Person, только с множествами.


Имена, которых следует избегать
1. Избегайте имён, имеющих разный смысл, но похожие имена
Есть вероятность, что вы спутаете имена таких переменных, и это не приведет к ошибке компиляции. Например, пары имен input и inputValue, recordNum и numRecords или fileNumber и fileIndex – явно плохие.

Сколько времени понадобится, чтобы заметить незначительное различие в XYZControllerForEfficientHandlingOfStrings в одном модуле и XYZControllerForEfficientStorageOfStrings где-то в другом месте?

2. Избегайте имён, включающих цифры, а также имен, содержащих символы, которые можно спутать с другими символами
Например, часто путаются 1 и l, 0 и O и т. п., поэтому, в частности, цифры в имени -- практически всегда плохо.

3. Избегайте имён стандартных типов, классов, методов и функций
Во многих языках программирования почти все популярные трёх-пятибуквенные слова, которые сразу приходят на ум, уже используются либо в самом языке, либо в его стандартных библиотеках. Это, например, sum, max, int, var, result, value и т. д. Придерживайтесь правила, что имя должно быть длиной 8-20 символов, и показывать явный смысл своего содержимого.

4. Избегайте неинформативных имён
В продолжение предыдущего пункта.
Слово variable никогда не должно встречаться в именах переменных, потому что оно пустое по смыслу. Слово table никогда не должно встречаться в именах таблиц, и т. д.

Чем имя NameString лучше Name? Разве имя объекта может быть, скажем, вещественным числом? А если вдруг может, то это нарушает требование о точном соответствии имени переменной её содержимому.

Или например, в программе присутствуют два класса с именами Customer и CustomerObject. Чем они различаются?

5. Не используйте имена со скрытым, подразумеваемым ("очевидным" только самому кодировщику) смыслом
Например, переменным не стоит присваивать имена ubuntu, fedora, mandriva, потому что они ассоциируются с разновидностями Linux. Даже если в переменной Fedora хранится игровой персонаж Федора, и такое имя кажется хорошим, оно может ввести в заблуждение читателя кода.

6. Спецификаторы (префиксы и постфиксы)
Многие программы включают переменные, содержащие вычисляемые значения: суммы, средние величины, максимумы и т. д. Дополняя такое имя спецификатором вроде Total, Sum, Average, Max, Min, Record, String или Pointer, укажите его в конце имени

Исключение из этого правила — спецификатор Num. При расположении в начале имени спецификатор Num обозначает общее число: например, numCustomers (num_customers) — это общее число заказчиков. Если же он указан в конце имени, то определяет индекс: так, customerNum (customer_num) — это номер текущего заказчика. Хотя в подобных случаях лучше использовать вместо Num спецификаторы Count, Index или Id.

Избегайте включения в имена информации об их типе или области видимости.

Не обозначайте группу учетных записей именем accountList, если только она действительно не хранится в списке (List).
Слово «список» имеет для программиста вполне конкретный смысл как конкретная структура, тип данных.
Если записи хранятся не в List, а в другом контейнере, это может привести к ложным выводам. В данном случае лучше подойдет имя accountGroup, bunchOfAccounts и даже просто accounts.

7. Спецификаторы (суффиксы)
Что такое velocity? Метры в секунду, километры в час, фурлонги в неделю?

Куда лучше velocity_mps, причём расшифровка "mps" должна быть явно прописана в документации или ТЗ как метры в секунду.

time -- это что? Микросекунды, минуты или тики игрового движка? Почему нету суффикса? :)

Спутник Mars Climate Orbiter разбился на Марсе в 1998-м из-за того, что один программист полагал, что высота меряется в футах, а другой -- что в метрах. В итоге крахом завершилась миссия ценой 320 млн. долл.

8. Задания
Найдите 12 примеров имён в вашем коде, которые следует избегать, исправьте, и выложите на гитхаб в формате "было - стало" (с учётом контекста).

Ваш ответ -- ссылку на ваше решение, файл на гитхабе -- введите в форму ниже: 
