1) Было:
public class Person implements Comparable{
    private long id;
    public double capital;
	...// много других public полей.
}
Делаем все поля private.  И позволяем их поринициализировать только в конструкторе.
public class Person implements Comparable{
    private long id;
    private double capital;
	...// много других public полей.
}

2) Было:
public class GaussianGenerator extends IncrementGenerator {
    Random rnd;
    double scaleParam;
    double locationParam;
} 
Делаем все поля private. И позволяем их поринициализировать только в конструкторе.
public class GaussianGenerator extends IncrementGenerator {
    private Random rnd;
    private double scaleParam;
    private double locationParam;
} 

3) Уже приводила такой пример для задания 11, но мне кажется в это задание он подходит даже больше. 
Было:
		long time;
        if (!isSorted) {
            time = System.currentTimeMillis();
            ...
			timeSorting += System.currentTimeMillis() - time;
        }
        time = System.currentTimeMillis();
        ...
        timeGenerating += System.currentTimeMillis() - time;
        time = System.currentTimeMillis();
        ...
		timeCounting += System.currentTimeMillis() - time;
		time = System.currentTimeMillis();
		timeVoting += System.currentTimeMillis() - time;
Лучше создать отдельные методы для сортировки, генерации, подсчета и голосования, которых бы измерялось время данных операций.

4) Большой метод, который сканирует параметры.
public void scanParams(String paramString) {
	...
	if (parts[0].equalsIgnoreCase("AltruisticStrategy")) { 
		 // Создаем объект стратегия, заполняем параметры.		
    }
    if (parts[0].equalsIgnoreCase("Participants")) {
      // Создаем участников.
    }
}
Лучше вынести создание стратегии и участников в отдельные методы.

5)Было:
private IncrementGenerator getIncGen(int numConfig) {
        if (incGenerator.getClass() == GaussianGenerator.class) {
            GaussianGenerator generator= new GaussianGenerator();
            if (generatorParams.size() != 0)
            {
                generator.setScaleParam(getParameter(generatorParams.get(0),numConfig));
                generator.setLocationParam(getParameter(generatorParams.get(1),numConfig));
            }
            return generator;
        }
        if (incGenerator.getClass() == StudentGenerator.class) {...}
		if (incGenerator.getClass() == ParetoGenerator.class) {...}
		if (incGenerator.getClass() == LaplaceGenerator.class) {...}
Другие генераторы создаются аналогично генератору нормально распределенных чисел. Вместо повторяющегося кода, лучше создать метод, например такой:
private createGenerator(IncrementGenerator incrementGenerator, int numOfConfig). В него будем предавать конкретный объект-генератор, который реализует интерфейс IncrementGenerator. И вызывать сеттеры setScaleParam(), setLocationParam().


6) Было:
public class FileHelper {
    ArrayList <String> list = new ArrayList<>();
	
	public ArrayList<String> parseFile(String filename) throws IOException {
       // Здесь заполняется list.	
	}
Лучше убрать поле лист из клааса, и создавать лист в методе и возвращать его.
public ArrayList<String> parseFile(String filename) throws IOException {
        ArrayList <String> list = new ArrayList<>();
		...
		return list;
	}           

7) Было:
public class TableComparator {
	private Table tableA;
	private Table tableB;
	
	public static void parseTablesFromFiles(String filePathA, String filePathB) {
		tableA = ...
		tableB = ...
	}
	
	public static void compareTables() {
		// Сравниваем таблицы, выводим результат в консоль.
	}
Лучше убрать поля tableA, tableB, переделать метод parseTablesFromFiles и compareTables.
	public static void parseTableFromFile(String filePath) {
		Table table = ...
		return table;
	}
	
	public static void compareTablesFromFiles(String filePathA, String filePathB) {
		Table tableA = parseTableFromFile(...);
		Table tableB = parseTableFromFile(...);
		//Сравниваем таблицы.
	}

8) public class EnvironmentExperiment {

	public Environment env;
	
	publice void conductExperiment() {...}
}
Поле env используется только в методе conductExperiment, поэтому можно эту переменную переместить туда.
public class EnvironmentExperiment {	

	publice void conductExperiment() {
		Environment env = ...;
	}
}

9) Было:
public class Group {
    private long id;
    public ArrayList<Person> participants = new ArrayList<Person>();
    public String name;
	public double increment;

}
Делаем все пол приватными.
public class Group {
    private long id;
    private ArrayList<Person> participants = new ArrayList<Person>();
    private String name;
	private double increment = 0;
}

10) Было:
public class Group {
    ...
	private double increment = 0;
	
	public void calcIncrement() {
        for (int i = 0; i < participants.size(); i++) {
            increment += participants.get(i).increment;
        }
        increment = ...;
    }
Лучше вовсе убрать поле increment, т.к. при добавлении в группу новых участников нужно все равно каждый раз вызывать метод calcIncrement, лучше просто его вызывать при необходимости.
public void calcIncrement() {
	double increment = 0;
    for (int i = 0; i < participants.size(); i++) {
        increment += participants.get(i).increment;
    }
    return increment;
}

11) Было:
public class ParticipantInfo {
    ...
    public String groupName;
}
Каждый участник помещен в группу, и поэтому groupName - это дублирующаяся информация. Это поле можно вовсе удалить, т.к. мы не работаем с участниками непосредственно, а получаем доступ к ним только через их группу.

12) Было:
String currentLine;
try {
    br = new BufferedReader(new FileReader(filename));
    while ((currentLine = br.readLine()) != null) {...}
} catch {...}
Переносим инициализацию переменной currentLine в блок try-catch.
try {
	String currentLine;
    br = new BufferedReader(new FileReader(filename));
    while ((currentLine = br.readLine()) != null) {...}
} catch {...}

13) Было:
private static void conductExperiment() throws Exception {
	...
	// Проводим эксперимент для альтруистов.
	// Проводим эксперимент для эгоистов.
	// Выводим результаты.
Разделяем код и выносим в 3 разных метода, conductExperimentForEgoists, conductExperimentForAltruists, printResults()

14) Было:
Person person;
for (int i = 0; i < persons.size(); i++) {
    person = persons.get(i);
	...
}
Перенесем переменную person в тело цикла.
for (int i = 0; i < persons.size(); i++) {
    Person person = persons.get(i);
	...
}
			
15)

